/*
 * -------------------------------------------------
 * h3achipimputation Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  version         = '1.0'
  // container       = 'docker://quay.io/h3abionet_org/imputation_tools' // Container slug. Stable releases should specify release tag!
  clusterOptions  = false
  help            = false

  chromosomes     = [ 1,2,3,4,5 ,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 ] // Impute all chromosomes by default
  // chromosomes     = [ 22 ] // Impute all chromosomes by default
  project_name    = "REFIMPUTE" // Default project name
  outdir          = "/scratch3/users/nanje/chipimputation_evaluate_chips/results"


  datasets = [ 
      ["H3Africa", "/cbio/projects/001/clients/hlaimpute/datasets/h3a_africans_edited_hla.vcf.gz", "/cbio/projects/001/clients/hlaimpute/datasets/all.v4.meta.updated.africans"],
      ["1kg_All", "/cbio/projects/001/clients/hlaimpute/datasets/1kg_All_edited_hla.vcf.gz", "/cbio/projects/001/clients/hlaimpute/datasets/all.v4.meta.updated.africans"],  
      ["1kg_Afr", "/cbio/projects/001/clients/hlaimpute/datasets/1kg_Afr_hla.vcf.gz", "/cbio/projects/001/clients/hlaimpute/datasets/all.v4.meta.updated.africans"],
      ["1kg_Gwd", "/cbio/projects/001/clients/hlaimpute/datasets/1kg_Gwd_hla.vcf.gz", "/cbio/projects/001/clients/hlaimpute/datasets/all.v4.meta.updated.africans"],
  ]

  // Genetic map for eagle2
  eagle_genetic_map = "/cbio/dbs/refpanels/eagle/tables/genetic_map_hg19_withX.txt.gz"

  reference_genome = "/cbio/dbs/gatk/2.8/b37/human_g1k_v37_decoy.fasta"

 // QC option
  min_ac = '2'
  min_alleles = '2'
  max_alleles = '2'

  // Minimac4 option
  minRatio = '0.01'
  chunk = ''
  // imputation parameters
  chunk_size = "10000000" // in base
  buffer_size = "100000" // in base
}

// process.container = 'docker://quay.io/h3abionet_org/imputation_tools' // Container slug. Stable releases should specify release tag!
process {
    // Process-specific resource requirements
    withLabel: 'medium' {
        memory        = { 6.GB * task.attempt } 
        errorStrategy = 'retry'
        cpus          = { 2 * task.attempt }
        time          = { 24.h * task.attempt }
    }
    withLabel : 'bigmem' {
        memory        = { 100.GB * task.attempt }
        errorStrategy = 'retry'
        cpus          = { 10 * task.attempt }
        time          = { 240.h * task.attempt }
    }
    withLabel : 'bigmem5' {
        memory        = { 50.GB * task.attempt }
        errorStrategy = 'retry'
        cpus          = 5 
        time          = 240.h
    }

    withLabel : 'bigmem10' {
        memory        = { 100.GB * task.attempt }
        errorStrategy = 'retry'
        cpus          = { 10 * task.attempt }
        time          = { 24.h * task.attempt }
        container     = 'docker://quay.io/mypandos/pgx_tools'
    }

    withLabel : 'bigmem20' {
        memory        = { 50.GB * task.attempt }
        errorStrategy = 'retry'
        cpus          = 20
        time          = 240.h
    }
    
    withLabel : 'impute5' {
      errorStrategy  = { if (task.exitStatus in [143, 137, 255]) { 'retry' } else { 'terminate' } }
      cpus = 10
      memory = 50.GB
      container = 'docker://quay.io/mypandos/impute5:latest'
    }
}

profiles {
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    process.container = 'docker://quay.io/h3abionet_org/imputation_tools'
  }
  slurm {
    process.executor = 'slurm'
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
  name = 'h3achipimputation'
  description = 'imputation'
  homePage = 'https://github.com/h3abionet/chipimputation'
  mainScript = 'main.nf'
  version = '>=24.04.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

workflow.onComplete = {
  println "========================================="
  println "Pipeline completed at: $workflow.complete"
  println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}
